name: Build

on:
  workflow_dispatch:
    inputs:
      remote_ref:
        description: 'Remote reference'
        required: true
        default: 'master'
      local_ref:
        description: 'Local reference'
        required: true
        default: 'master'

jobs:
  build:
    name: Build
    runs-on: ubuntu-20.04
    steps:

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1
      with:
        fetch-depth: 0

    - name: Install
      run: |
        sudo apt-get update
        sudo apt-get install wget tar cmake ninja-build clang python3 build-essential libpthread-stubs0-dev clang-11 gcc-multilib lld

    - name: Git
      run: |
        git clone https://github.com/ClickHouse/ClickHouse.git
        cd ClickHouse
        git checkout ${{ github.event.inputs.remote_ref }}
        git submodule init
        git submodule update

    - name: Build
      run: |
        # define a directory for the output artifacts
        output_dir="build_results"
        # a simplest build
        ./docker/packager/packager --package-type=binary --output-dir "$output_dir"
        # build debian packages
        ./docker/packager/packager --package-type=deb --output-dir "$output_dir"
        # by default, debian packages use thin LTO, so we can override it to speed up the build
        CMAKE_FLAGS='-DENABLE_THINLTO=' ./docker/packager/packager --package-type=deb --output-dir "./$(git rev-parse --show-cdup)/build_results"

    - name: Create Release
      id: create_release
      uses: zendesk/action-create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.local_ref }}
        release_name: Release ${{ github.event.inputs.local_ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/github-script@v2
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const fs = require('fs').promises;
          const upload_url = '${{ steps.create_release.outputs.upload_url }}';
          for (let file of await fs.readdir('./ClickHouse/build-arm64/programs')) {
            console.log('uploading', file);
            if (!file.includes('clickhouse')) {
              continue;
            }
            await github.repos.uploadReleaseAsset({
              url: upload_url,
              name: file,
              data: await fs.readFile(`./ClickHouse/build-arm64/programs/${file}`)
            });
          }
